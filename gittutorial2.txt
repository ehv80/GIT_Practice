# Registro del tutorial de GIT Segunda Parte
# Jueves 28 de Enero del 2021
# man gitutorial2

Un Tutorial de introducción a GIT Parte 2

Debería leer primero el primer tutorial
$ man gittutorial

El objetivo de este tutorial es introducir dos piezas fundamentales de la Arquitectura de GIT
La Base de datos de objetos y el archivo de índice y proporcionar al lector todo lo necesario
para comprender el resto de la documentación.

LA BASE DE DATOS DE OBJETOS DE GIT

Vamos a crear un nuevo proyecto y crear un pequeño lapso de historia

$ mkdir test-project
$ cd test-project

$ git init
Inicializado repositorio Git vacío en /home/ehv80/Documentos/Git/test-project/.git/

$ echo 'hello world' > file.txt
$ git add .

$ git commit -a -m "Confirmación Inicial"
[master (commit-raíz) e3f0718] Confirmación Inicial
 1 file changed, 1 insertion(+)
 create mode 100644 file.txt

$ echo 'hello world!' >file.txt

$ git commit -a -m "Se agrega el Signo de Admiración al Final"
[master 6e7bdb3] Se agrega el Signo de Admiración al Final
 1 file changed, 1 insertion(+), 1 deletion(-)

¿Qué son esos 7 dígitos hexadecimales que GIT mostró con la confirmación?

Vimos en la Primer Parte del Tutorial que las confirmaciones (commits) tienen nombres como éstos.
Resulta que cada objeto en el Historial de GIT es almacenado bajo un nombre hexadecimal (0 al 9 A a la F) de 40 dígitos.
Este nombre es el hash SHA-1 del contenido del objeto, junto con otras cosas, esto asegura que GIT nunca almacenará
los mismos datos dos veces (ya que los datos idénticos reciben un nombre SHA-1 idéntico) 
y que el contenido de un objeto de GIT no cambiará nunca (ya que eso también cambiaría el nombre del objeto).
Las cadenas de 7 caracteres Hexadecimales aquí son simplemente la abreviatura de estas cadenas de 40 caracteres de longitud.
Las abreviaturas se pueden utilizar en todos los lugares donde se pueden utilizar cadenas de 40 caracteres, siempre que no sean ambiguas.

Se espera que el contenido del objeto de confirmación que creó mientras seguía el ejemplo anterior 
genere un hash SHA-1 diferente al que se muestra arriba porque el objeto de confirmación
registra la hora en que se creó y el nombre de la persona que realiza la confirmación.

Podemos preguntarle a Git sobre este objeto en particular con el comando cat-file. 
No copie los 40 dígitos hexadecimales de este ejemplo, utilice los de su propia versión. 
Tenga en cuenta que puede acortarlo a solo unos pocos caracteres para evitar tener que escribir los 40 dígitos hexadecimales:

$ git cat-file -t e3f0718
commit


$ git cat-file commit e3f0718
tree 92b8b694ffb1675e5975148e1121810081dbdffe
author ehv80 <ezequiel.villanueva@gmail.com> 1611870437 -0300
committer ehv80 <ezequiel.villanueva@gmail.com> 1611870437 -0300

Confirmación Inicial


Un árbol puede hacer referencia a uno o más objetos "blob" ("Binary Large Object"), cada uno correspondiente a un archivo.
Además, un árbol también puede hacer referencia a otros objetos de árbol, 
creando así una jerarquía de directorios. Usted puede examinar el contenido de cualquier árbol usando ls-tree 
(recuerde que una porción inicial suficientemente larga del SHA-1 también funcionará)

$ git ls-tree 92b8b694
100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad	file.txt

Por tanto, vemos que este árbol tiene un archivo. El hash SHA-1 es una referencia a los datos de ese archivo:

$ git cat-file -t 3b18e512
blob

Un "blob" son solo datos de archivo, que también podemos examinar con cat-file:

$ git cat-file blob 3b18e512
hello world

Tenga en cuenta que estos son los datos del archivo antiguo; 
por lo que el objeto que Git nombró en su respuesta al árbol inicial 
era un árbol con una instantánea del estado del directorio que fue registrado por la primer confirmación.

Todos estos objetos se almacenan con sus nombres SHA-1 dentro del directorio Git:
$ find .git/objects/
.git/objects/
.git/objects/e3
.git/objects/e3/f071807107dd8ae554c83fe644b484c33d40b3
.git/objects/d0
.git/objects/d0/492b368b66bdabf2ac1fd8c92b39d3db916e59
.git/objects/3b
.git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad
.git/objects/info
.git/objects/92
.git/objects/92/b8b694ffb1675e5975148e1121810081dbdffe
.git/objects/6e
.git/objects/6e/7bdb3ab15f39ed8cbc84bb0aff2f79638b555c
.git/objects/pack
.git/objects/a0
.git/objects/a0/423896973644771497bdc03eb99d5281615b51

y el contenido de estos archivos son solo los datos comprimidos más un encabezado que identifica su longitud y su tipo.
El tipo puede ser un blob, un árbol, una confirmación o una etiqueta.

La confirmación más sencilla de encontrar es la confirmación HEAD, que podemos encontrar en .git / HEAD:
$ cat .git/HEAD
ref: refs/heads/master

Como puede ver, esto nos dice en qué rama estamos actualmente, y nos dice esto al nombrar un archivo en el directorio .git,
que a su vez contiene un nombre SHA-1 que se refiere a un objeto confirmación, que podemos examinar con cat-file:

$ cat .git/refs/heads/master
6e7bdb3ab15f39ed8cbc84bb0aff2f79638b555c

Muestra que tipo de objeto de la base de datos de GIT es con
$ git cat-file -t 6e7bdb3a
commit

$ git cat-file commit 6e7bdb3a
tree d0492b368b66bdabf2ac1fd8c92b39d3db916e59
parent e3f071807107dd8ae554c83fe644b484c33d40b3
author ehv80 <ezequiel.villanueva@gmail.com> 1611871055 -0300
committer ehv80 <ezequiel.villanueva@gmail.com> 1611871055 -0300

Se agrega el Signo de Admiración al Final


El objeto "árbol" aquí se refiere al nuevo estado del árbol:
$ git ls-tree d0492b36
100644 blob a0423896973644771497bdc03eb99d5281615b51	file.txt

$ git cat-file blob a0423896
hello world!

y el objeto "padre" se refiere a la confirmación anterior:
(yo agrego que no se refiere a una carpeta o directorio padre del sistema de archivo,
en el sistema de archivos están en el mismo nivel)
$ git cat-file commit e3f07180
tree 92b8b694ffb1675e5975148e1121810081dbdffe
author ehv80 <ezequiel.villanueva@gmail.com> 1611870437 -0300
committer ehv80 <ezequiel.villanueva@gmail.com> 1611870437 -0300

Confirmación Inicial


El objeto de tipo árbol es el árbol que examinamos primero, 
y esta confirmación es inusual porque carece de un padre.

La mayoría de las confirmaciones tienen solo un padre, 
pero también es común que una confirmación tenga varios padres. 
En ese caso, la confirmación representa una fusión (merge), 
con las referencias padres apuntando a las cabezas (HEADs) de las ramas fusionadas.

Además de los "blobs", los árboles y las confirmaciones, el único tipo de objeto restante es una "etiqueta", 
que no discutiremos aquí; consulte git-tag (1) para obtener más detalles.

Entonces, ahora sabemos cómo Git usa la base de datos de objetos para representar el historial de un proyecto:

· Los objetos de tipo "confirmación" se refieren a los objetos de tipo "árbol" que representan 
  la instantánea de un árbol de directorios en un punto particular del historial, 
  y se refieren a las confirmaciones "padres" para mostrar cómo están conectados al historial del proyecto

· Los objetos de tipo "árbol" representan el estado de un solo directorio, 
  asociando los nombres de directorio a objetos de tipo "blob" que contienen los datos del archivo 
  y otros objetos de tipo "árbol" que contienen información de los subdirectorios.

· Los objetos de tipo "blob" contienen los datos de ese archivo sin ninguna otra estructura.

· Las referencias a los objetos de tipo confirmación (commit) en la cabecera de cada rama (branch) existente
  se almacenan en archivos bajo .git / refs / heads /. 

· El nombre de la rama (branch) actual se almacena en .git / HEAD.

Tenga en cuenta, por cierto, que muchos comandos toman un árbol como argumento. 
Pero como podemos ver arriba, se puede hacer referencia a un árbol de muchas maneras diferentes: 
por el nombre SHA-1 para ese árbol, 
por el nombre de la confirmación (commit) que se refiere a ese árbol, 
por el nombre de la rama cuya cabeza (HEAD) se refiere a ese árbol, etc., 
y la mayoría de estos comandos pueden aceptar cualquiera de estos nombres.

En las sinopsis de comandos, a veces se usa la palabra "tree-ish" ("arbol") para designar tal argumento.


EL ARCHIVO DE ÍNDICE

La herramienta principal que hemos estado usando para crear confirmaciones 
es git-commit -a, que crea una confirmación que incluye todos los cambios que ha realizado en su árbol de trabajo. 
Pero, ¿que pasa si necesitas confirmar cambios solo en ciertos archivos? ¿O solo ciertos cambios en ciertos archivos?

Si observamos la forma en que se crean las confirmaciones bajo la cubierta, 
veremos que hay maneras más flexibles de crear confirmaciones.

Continuando con nuestro proyecto de prueba "test-project", modificaremos el archivo "file.txt" de nuevo:

$ echo "hello world, again" >>file.txt

Pero esta vez en lugar de hacer las confirmaciones (commits) inmediatamente, vamos a dar un paso intermedio
y preguntar por diferencias en el camino para realizar un seguimiento de lo que va sucediendo.

$ git diff
diff --git a/file.txt b/file.txt
index a042389..513feba 100644
--- a/file.txt
+++ b/file.txt
@@ -1 +1,2 @@
 hello world!
+hello world, again

$ git add file.txt

(Yo agrego esta duda ¿cada vez que se modifica un archivo en el sistema de archivos se requiere ejecutar: git add <file> ?)
(Aclaración al comienzo de este tutorial ejecutó   git add .    no  git add file.txt)

$ git diff

Esta última ejecución de:  git diff  no muestra nada en su salida, pero tenga en cuenta que 
no se han hecho nuevas confirmanciones, ni tampoco el apuntador HEAD contiene una nueva línea.

$ git diff HEAD
diff --git a/file.txt b/file.txt
index a042389..513feba 100644
--- a/file.txt
+++ b/file.txt
@@ -1 +1,2 @@
 hello world!
+hello world, again

Entonces  git diff  está comparando contra otra cosa que el apuntador HEAD. 
La cosa contra la cuál está comparando actualmente es el archivo de índice,
el cuál es almacenado en el archivo: .git/index  en un formato binario,
pero cuyo contenido podemos examinar con  ls-files 

$ git ls-files --stage
100644 513feba2e53ebbd2532419ded848ba19de88ba00 0	file.txt

$ git cat-file -t 513feba2
blob

$ git cat-file blob 513feba2
hello world!
hello world, again

Entonces, lo que hizo nuestro   git add file.txt  fue almacenar un nuevo objeto de tipo "Blob"
y luego poner una referencia a éste en el archivo de índice. Si modificamos el archivo de nuevo,
veremos que las nuevas modificaciones serán reflejadas en la salida de  git diff

$ echo 'again?' >> file.txt

$ git diff
diff --git a/file.txt b/file.txt
index 513feba..ba3da7b 100644
--- a/file.txt
+++ b/file.txt
@@ -1,2 +1,3 @@
 hello world!
 hello world, again
+again?

Con los argumentos correctos,  git diff  también puede mostrarnos la diferencia entre el directorio de trabajo
y la última confirmación, o entre el índice y la última confirmación:

$ git diff HEAD
diff --git a/file.txt b/file.txt
index a042389..ba3da7b 100644
--- a/file.txt
+++ b/file.txt
@@ -1 +1,3 @@
 hello world!
+hello world, again
+again?

(Yo agrego que con  git diff HEAD  se pueden apreciar las diferencias en el historial de cambios 
(hasta la última o 3era modificación confirmada apuntada por HEAD)

$ git diff --cached
diff --git a/file.txt b/file.txt
index a042389..513feba 100644
--- a/file.txt
+++ b/file.txt
@@ -1 +1,2 @@
 hello world!
+hello world, again

(Yo agrego que con  git diff --cached   se pueden apreciar las diferencias en el historial de cambios
(hasta la penúltima o 2da modificación confirmada apuntada por HEAD)

En cualquier momento, podemos crear una nueva confirmación usando  git commit  (sin la opción "-a")
y verificar que el estado confirmado solo incluye los cambios almacenados en el archivo de índice,
no el cambio adicional que todavía esta solo en nuestro arbol de trabajo.

$ git commit -m "repeat"
[master ff04f1d] repeat
 1 file changed, 1 insertion(+)

$ git diff HEAD
diff --git a/file.txt b/file.txt
index 513feba..ba3da7b 100644
--- a/file.txt
+++ b/file.txt
@@ -1,2 +1,3 @@
 hello world!
 hello world, again
+again?

Entonces por defecto  git commit  usa el índice para crear la confirmación, no el arbol de trabajo,
la opción "-a" le dice a commit que primero actualice el índice con todos los cambios en el arbol de trabajo.

Finalmente, vale la pena observar el efecto de  git add <filename>  en el archivo de índice

$ echo "goodbye, world" > closing.txt

$ git add closing.txt

El efecto de  git add <filename>  era agregar una entrada al archivo de índice

$ git ls-files --stage
100644 8b9743b20d4b15be3955fc8d5cd2b09cd2336138 0	closing.txt
100644 513feba2e53ebbd2532419ded848ba19de88ba00 0	file.txt

Y, como se puede ver con  cat-file,  esta nueva entrada se refiere al contenido actual del archivo

$ git cat-file blob 8b9743b2
goodbye, world

El comando "status" de git es una manera útil de obtener un resumen rápido de la situación
$ git status
En la rama master
Cambios a ser confirmados:
  (usa "git reset HEAD <archivo>..." para sacar del área de stage)

	nuevo archivo:  closing.txt

Cambios no rastreados para el commit:
  (usa "git add <archivo>..." para actualizar lo que será confirmado)
  (usa "git checkout -- <archivo>..." para descartar los cambios en el directorio de trabajo)

	modificado:     file.txt

Dado que el estado actual del archivo  closing.txt  se almacena temporalmente en memoria cache en el archivo de índice,
éste se lista como "cambios a ser confirmados / change to be commited".

Dado que el archivo  file.txt  tiene cambios en el directorio de trabajo que no están reflejados en el archivo de índice,
éste es marcado como "modificado pero no actualizado". En este punto, la ejecución de  git commit  podría crear una confirmación
que agregara el archivo  closing.txt  (con su nuevo contenido), pero que no modificara el estado del archivo file.txt.


Además, tenga en cuenta que un sencillo  git diff  muestra los cambios del archivo  file.txt,  
pero no la adición del archivo  closing.txt,  
porque la versión del archivo  closing.txt  que está en el archivo de índice 
es idéntica a la que está en el directorio de trabajo en el sistema de archivos.

Además de ser el  área de preparación (staging area)  para nuevas confirmaciones 
el archivo de índice también se completa desde la base de datos de objetos 
cuando  se chequea (checking out) a una rama (branch), 
y se usa para mantener los árboles (tree) involucrados en la operación de fusión (merge). 
Vea  gitcore-tutorial(7) y demás páginas de manual (man-pages) relevantes para mas detalles.

QUÉ SIGUE?

En este punto deberías conocer todo lo necesario para poder leer todas las páginas de manual 
de cualquiera de los comandos de git, un buen lugar para comenzar podría ser 
leer los comandos mencionados en la página de manual (man-page) de giteveryday(7)

Deberías ser capáz de encontrar cualquier jerga desconocida en la página de manual (man-page) de gitglossary(7).

El  Manual de Usuario de GIT Git User’s Manual[1]  provee una introducción más comprensiva a GIT.

La página de manual (man-page) de gitcvs-migration(7), explica como importar un repositorio CVS dentro GIT, 
y muestra como usar GIT a la manera de CVS (CVS-like way).

Para mas ejemplos de usos interesantes de GIT vea los howtos[2].

Para los desarrolladores de GIT, la página de manual  gitcore-tutorial(7)  
detalla los mecanismos de bajo-nivel involucrados en, por ejemplo, la creación de una nueva confirmación.

SEE ALSO / VEA TAMBIÉN

       gittutorial(7), gitcvs-migration(7), gitcore-tutorial(7), gitglossary(7), git-help(1), giteveryday(7), The Git User’s Manual[1]

GIT
       Part of the git(1) suite

NOTES
        1. Git User’s Manual
           file:///usr/share/doc/git/html/user-manual.html

        2. howtos
           file:///usr/share/doc/git/html/howto-index.html

Git 2.17.1                                                                                  04/20/2020
---
